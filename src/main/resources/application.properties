# Application Name
spring.application.name=article-scraper

# MongoDB Configuration
spring.data.mongodb.uri=mongodb://localhost:27017/article_scraper

# Spring Batch Configuration
# Do not initialize schema using JDBC, as we are using MongoDB for batch metadata via spring-batch-mongodb
spring.batch.jdbc.initialize-schema=never
# Prevent jobs from running on application startup by default.
# Jobs can be triggered via API, scheduler, or other mechanisms.
spring.batch.job.enabled=false

# Logging Levels
logging.level.org.springframework.batch=INFO
logging.level.com.example.articlescraper=DEBUG # Set default logging for the application

# Custom Application Properties
# Delay in milliseconds between scraping attempts for politeness
scraper.delayMs=1000

# GCS Configuration
gcs.bucket.name=your-article-scraper-bucket # Default bucket name for GCS uploads

# GCP Pub/Sub Configuration
gcp.pubsub.topic.name=article-updates-topic # Default Pub/Sub topic name

# Spring Security Configuration
# Default user for Basic Auth if no custom UserDetailsService is overriding.
# NOTE: The password here is plain text and INSECURE. For production, use environment variables
# or a secure configuration provider and ensure passwords are encrypted.
# The SecurityConfig.kt currently provides its own InMemoryUserDetailsManager.
spring.security.user.name=admin
spring.security.user.password=password # INSECURE: For demonstration only.

# Spring Boot Actuator - exposing health and info by default
management.endpoints.web.exposure.include=health,info,metrics,prometheus,env,beans,configprops,jobs,jobInstances,jobExecutions,stepExecutions

# Spring Task
# By default, Spring Task will try to update task execution status in a data source.
# Since we are using MongoDB for batch and not explicitly configuring a separate task datasource,
# and @EnableTask is present, Spring Boot will auto-configure a TaskConfigurer.
# If spring-boot-starter-jdbc is not on the classpath, it will use a SimpleTaskRepository.
# For more robust task management with MongoDB, one might need a custom TaskConfigurer
# similar to how MongoBatchConfigurer is set up for batch jobs, or ensure appropriate
# Spring Cloud Task dependencies and configurations are in place if MongoDB is to be used for task repository as well.
# For now, relying on default behavior with @EnableTask.
# spring.cloud.task.initialize-schema=never # If using a DB for task repo, this would be relevant.
# spring.cloud.task.table-prefix= # If using a DB for task repo.

# For spring-batch-mongodb, ensure the collections are appropriate
# These are default names from spring-batch-mongodb, listed for awareness
# spring.batch.mongodb.collection.job-instance=BatchJobInstance
# spring.batch.mongodb.collection.job-execution=BatchJobExecution
# spring.batch.mongodb.collection.job-execution-params=BatchJobExecutionParams
# spring.batch.mongodb.collection.step-execution=BatchStepExecution
# spring.batch.mongodb.collection.step-execution-context=BatchStepExecutionContext
# spring.batch.mongodb.collection.job-execution-context=BatchJobExecutionContext
